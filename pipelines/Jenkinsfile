pipeline {
    agent any
    
    environment {
        GIT_URL = 'git@github.com:juanMBMedina/AcademiaQA_Cypress_YourStoreSite.git'
        SONAR_TOKEN = credentials('sonar-token')
        MAX_RETRIES = 3
        WAIT_TIME = 5
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Current directory: ${WORKSPACE}"
                echo "Cloning from: ${GIT_URL}"
                git branch: 'main', credentialsId: 'github-ssh-key', url: env.GIT_URL
            }
        }

        stage('Wait for SonarQube & Get IP') {
            steps {
                script {
                    def isSonarUp = { () ->
                        def statusCode = sh(
                                script: "curl -s -o /dev/null -w '%{http_code}' http://sonarqube:9000",
                                returnStdout: true
                            ).trim()
                            def isUp = (statusCode == "200")
                            echo isUp ? "‚úÖ SonarQube est√° arriba (HTTP 200 OK)" : "‚ö†Ô∏è SonarQube a√∫n no est√° listo (Status: ${statusCode})"
                            return isUp
                    }

                    def ip = ""
                    def sonarUp = false
                    retry(env.MAX_RETRIES.toInteger()) {
                        if (isSonarUp()) {
                            sonarUp = true
                            return
                        }
                        echo "üîÑ Esperando ${env.WAIT_TIME} segundos antes de reintentar..."
                        sleep(env.WAIT_TIME.toInteger())
                        error("SonarQube a√∫n no est√° listo, reintentando...")
                    }

                    if (!sonarUp) {
                        error("‚ùå SonarQube no inici√≥ en el tiempo esperado. Pipeline abortado.")
                    }
                    echo "‚úÖ SonarQube est√° corriendo en: http://sonarqube:9000"
                }
            }
        }

        stage('Run SonarScanner') {
            steps {
                    sh "docker-compose run --rm -e SONAR_TOKEN=${SONAR_TOKEN} sonar-scanner"
                }
            }
        }
    }
}