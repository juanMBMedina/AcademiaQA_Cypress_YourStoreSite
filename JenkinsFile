pipeline {
    agent any
    
    environment {
        GIT_URL = 'git@github.com:juanMBMedina/AcademiaQA_Cypress_YourStoreSite.git'
        SONAR_PROJECT_KEY = 'YourStoreSiteCypress'
        SONAR_TOKEN = credentials('sonar-token')
        SONAR_EXCLUSIONS = "**/node_modules/**,**/dist/**"
        MAX_RETRIES = 3
        WAIT_TIME = 5
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Current directory: ${WORKSPACE}"
                echo "Cloning from: ${GIT_URL}"
                git branch: 'main', credentialsId: 'github-ssh-key', url: env.GIT_URL
            }
        }

        stage('Wait for SonarQube & Get IP') {
            steps {
                script {
                    // Definir funciones locales dentro del script block
                    def getSonarUrl = { ->
                        return sh(
                            script: "docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' sonarqube || echo ''",
                            returnStdout: true
                        ).trim()
                    }

                    def isSonarUp = { ip ->
                        if (ip) {
                            def statusCode = sh(
                                script: "curl -s -o /dev/null -w '%{http_code}' http://${ip}:9000",
                                returnStdout: true
                            ).trim()
                            def isUp = (statusCode == "200")
                            echo isUp ? "‚úÖ SonarQube est√° arriba (HTTP 200 OK)" : "‚ö†Ô∏è SonarQube a√∫n no est√° listo (Status: ${statusCode})"
                            return isUp
                        } else {
                            echo "‚ùå No se encontr√≥ el contenedor de SonarQube. Reintentando..."
                            return false
                        }
                    }

                    // Esperar hasta que SonarQube est√© disponible
                    def ip = ""
                    def sonarUp = false
                    retry(env.MAX_RETRIES.toInteger()) {
                        ip = getSonarUrl()
                        if (isSonarUp(ip)) {
                            sonarUp = true
                            return
                        }
                        echo "üîÑ Esperando ${env.WAIT_TIME} segundos antes de reintentar..."
                        sleep(env.WAIT_TIME.toInteger())
                        error("SonarQube a√∫n no est√° listo, reintentando...")
                    }

                    if (!sonarUp) {
                        error("‚ùå SonarQube no inici√≥ en el tiempo esperado. Pipeline abortado.")
                    }

                    env.SONAR_HOST_URL = "http://${ip}:9000"
                    echo "‚úÖ SonarQube est√° corriendo en: ${env.SONAR_HOST_URL}"
                }
            }
        }

        stage('Run SonarScanner') {
            steps {
                script {
                    sh """
                        docker-compose run --rm sonar-scanner \
                        sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.login=${SONAR_TOKEN} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.sources=/usr/src \
                        -Dsonar.exclusions=${SONAR_EXCLUSIONS}
                    """
                }
            }
        }
    }
}

